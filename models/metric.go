/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2017 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metric Metric represents the metric type.
// swagger:model Metric
type Metric struct {

	// description
	Description string `json:"description,omitempty"`

	// Dynamic boolean representation if the metric has dynamic element.
	Dynamic bool `json:"dynamic,omitempty"`

	// DynamicElements a slice of dynamic elements.
	DynamicElements []*DynamicElement `json:"dynamic_elements"`

	// href
	Href string `json:"href,omitempty"`

	// last advertised timestamp
	LastAdvertisedTimestamp int64 `json:"last_advertised_timestamp,omitempty"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// unit
	Unit string `json:"unit,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`

	// policy
	Policy PolicyTableSlice `json:"policy"`
}

// Validate validates this metric
func (m *Metric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicElements(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) validateDynamicElements(formats strfmt.Registry) error {

	if swag.IsZero(m.DynamicElements) { // not required
		return nil
	}

	for i := 0; i < len(m.DynamicElements); i++ {

		if swag.IsZero(m.DynamicElements[i]) { // not required
			continue
		}

		if m.DynamicElements[i] != nil {

			if err := m.DynamicElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dynamic_elements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Metric) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metric) UnmarshalBinary(b []byte) error {
	var res Metric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
