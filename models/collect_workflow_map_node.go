// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectWorkflowMapNode CollectWorkflowMapNode represents Snap workflow data model.
// swagger:model CollectWorkflowMapNode
type CollectWorkflowMapNode struct {

	// config
	Config map[string]map[string]interface{} `json:"config,omitempty"`

	// metrics
	// Required: true
	Metrics map[string]MetricInfo `json:"metrics"`

	// process
	Process []*ProcessWorkflowMapNode `json:"process"`

	// publish
	Publish []*PublishWorkflowMapNode `json:"publish"`

	// tags
	Tags map[string]map[string]string `json:"tags,omitempty"`
}

// Validate validates this collect workflow map node
func (m *CollectWorkflowMapNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetrics(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublish(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectWorkflowMapNode) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	return nil
}

func (m *CollectWorkflowMapNode) validateProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.Process) { // not required
		return nil
	}

	for i := 0; i < len(m.Process); i++ {

		if swag.IsZero(m.Process[i]) { // not required
			continue
		}

		if m.Process[i] != nil {

			if err := m.Process[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CollectWorkflowMapNode) validatePublish(formats strfmt.Registry) error {

	if swag.IsZero(m.Publish) { // not required
		return nil
	}

	for i := 0; i < len(m.Publish); i++ {

		if swag.IsZero(m.Publish[i]) { // not required
			continue
		}

		if m.Publish[i] != nil {

			if err := m.Publish[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publish" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectWorkflowMapNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectWorkflowMapNode) UnmarshalBinary(b []byte) error {
	var res CollectWorkflowMapNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
