package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Task Task represents Snap task definition.
// swagger:model Task
type Task struct {

	// creation timestamp
	CreationTimestamp int64 `json:"creation_timestamp,omitempty"`

	// deadline
	Deadline string `json:"deadline,omitempty"`

	// failed count
	FailedCount int64 `json:"failed_count,omitempty"`

	// hit count
	HitCount int64 `json:"hit_count,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last failure message
	LastFailureMessage string `json:"last_failure_message,omitempty"`

	// last run timestamp
	LastRunTimestamp int64 `json:"last_run_timestamp,omitempty"`

	// max failures
	MaxFailures int64 `json:"max-failures,omitempty"`

	// miss count
	MissCount int64 `json:"miss_count,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// schedule
	// Required: true
	Schedule *Schedule `json:"schedule"`

	// start
	Start bool `json:"start,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`

	// workflow
	// Required: true
	Workflow *WorkflowMap `json:"workflow"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *Task) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("workflow", "body", m.Workflow); err != nil {
		return err
	}

	if m.Workflow != nil {

		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}
