package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Task Task represents Snap task definition.
// swagger:model Task
type Task struct {

	// creation timestamp
	CreationTimestamp int64 `json:"CreationTimestamp,omitempty"`

	// deadline
	Deadline string `json:"Deadline,omitempty"`

	// failed count
	FailedCount int64 `json:"FailedCount,omitempty"`

	// hit count
	HitCount int64 `json:"HitCount,omitempty"`

	// href
	Href string `json:"Href,omitempty"`

	// ID
	// Unique: true
	ID string `json:"ID,omitempty"`

	// last failure message
	LastFailureMessage string `json:"LastFailureMessage,omitempty"`

	// last run timestamp
	LastRunTimestamp int64 `json:"LastRunTimestamp,omitempty"`

	// miss count
	MissCount int64 `json:"MissCount,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// schedule
	Schedule *Schedule `json:"Schedule,omitempty"`

	// state
	State string `json:"State,omitempty"`

	// workflow
	Workflow *WorkflowMap `json:"Workflow,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *Task) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *Task) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {

		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}
