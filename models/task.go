/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2017 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Task Task represents Snap task definition.
// swagger:model Task
type Task struct {

	// creation timestamp
	CreationTimestamp int64 `json:"creation_timestamp,omitempty"`

	// deadline
	Deadline string `json:"deadline,omitempty"`

	// failed count
	FailedCount int64 `json:"failed_count,omitempty"`

	// hit count
	HitCount int64 `json:"hit_count,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// last failure message
	LastFailureMessage string `json:"last_failure_message,omitempty"`

	// last run timestamp
	LastRunTimestamp int64 `json:"last_run_timestamp,omitempty"`

	// max failures
	MaxFailures int64 `json:"max-failures,omitempty"`

	// miss count
	MissCount int64 `json:"miss_count,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start
	Start bool `json:"start,omitempty"`

	// task state
	TaskState string `json:"task_state,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`

	// schedule
	Schedule *Schedule `json:"schedule,omitempty"`

	// workflow
	Workflow *WorkflowMap `json:"workflow,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *Task) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {

		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
