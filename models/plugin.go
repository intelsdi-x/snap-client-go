/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2017 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Plugin Plugin represents a plugin type definition.
// swagger:model Plugin
type Plugin struct {

	// config policy
	ConfigPolicy []PolicyTable `json:"config_policy"`

	// hit count
	HitCount int64 `json:"hitcount,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// ID
	ID uint32 `json:"id,omitempty"`

	// last hit timestamp
	LastHitTimestamp int64 `json:"last_hit_timestamp,omitempty"`

	// loaded timestamp
	LoadedTimestamp int64 `json:"loaded_timestamp,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pprof port
	PprofPort string `json:"pprof_port,omitempty"`

	// signed
	Signed bool `json:"signed,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this plugin
func (m *Plugin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigPolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plugin) validateConfigPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigPolicy) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Plugin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plugin) UnmarshalBinary(b []byte) error {
	var res Plugin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
