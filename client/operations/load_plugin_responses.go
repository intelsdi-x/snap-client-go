package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// LoadPluginReader is a Reader for the LoadPlugin structure.
type LoadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLoadPluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewLoadPluginCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLoadPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewLoadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoadPluginOK creates a LoadPluginOK with default headers values
func NewLoadPluginOK() *LoadPluginOK {
	return &LoadPluginOK{}
}

/*LoadPluginOK handles this case with default header values.

PluginsResp represents the response from plugin operations.
*/
type LoadPluginOK struct {
	Payload LoadPluginOKBody
}

func (o *LoadPluginOK) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginOK  %+v", 200, o.Payload)
}

func (o *LoadPluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginCreated creates a LoadPluginCreated with default headers values
func NewLoadPluginCreated() *LoadPluginCreated {
	return &LoadPluginCreated{}
}

/*LoadPluginCreated handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type LoadPluginCreated struct {
	Payload *models.Plugin
}

func (o *LoadPluginCreated) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginCreated  %+v", 201, o.Payload)
}

func (o *LoadPluginCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginBadRequest creates a LoadPluginBadRequest with default headers values
func NewLoadPluginBadRequest() *LoadPluginBadRequest {
	return &LoadPluginBadRequest{}
}

/*LoadPluginBadRequest handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type LoadPluginBadRequest struct {
	Payload LoadPluginBadRequestBody
}

func (o *LoadPluginBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginBadRequest  %+v", 400, o.Payload)
}

func (o *LoadPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginConflict creates a LoadPluginConflict with default headers values
func NewLoadPluginConflict() *LoadPluginConflict {
	return &LoadPluginConflict{}
}

/*LoadPluginConflict handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type LoadPluginConflict struct {
	Payload LoadPluginConflictBody
}

func (o *LoadPluginConflict) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginConflict  %+v", 409, o.Payload)
}

func (o *LoadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginInternalServerError creates a LoadPluginInternalServerError with default headers values
func NewLoadPluginInternalServerError() *LoadPluginInternalServerError {
	return &LoadPluginInternalServerError{}
}

/*LoadPluginInternalServerError handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type LoadPluginInternalServerError struct {
	Payload LoadPluginInternalServerErrorBody
}

func (o *LoadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *LoadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LoadPluginBadRequestBody load plugin bad request body
swagger:model LoadPluginBadRequestBody
*/
type LoadPluginBadRequestBody map[string]string

// Validate validates this load plugin bad request body
func (o LoadPluginBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*LoadPluginConflictBody load plugin conflict body
swagger:model LoadPluginConflictBody
*/
type LoadPluginConflictBody map[string]string

// Validate validates this load plugin conflict body
func (o LoadPluginConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*LoadPluginInternalServerErrorBody load plugin internal server error body
swagger:model LoadPluginInternalServerErrorBody
*/
type LoadPluginInternalServerErrorBody map[string]string

// Validate validates this load plugin internal server error body
func (o LoadPluginInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*LoadPluginOKBody load plugin o k body
swagger:model LoadPluginOKBody
*/
type LoadPluginOKBody struct {

	// plugins
	// Required: true
	Plugins []*models.Plugin `json:"Plugins"`
}

// Validate validates this load plugin o k body
func (o *LoadPluginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePlugins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoadPluginOKBody) validatePlugins(formats strfmt.Registry) error {

	if err := validate.Required("loadPluginOK"+"."+"plugins", "body", o.Plugins); err != nil {
		return err
	}

	for i := 0; i < len(o.Plugins); i++ {

		if swag.IsZero(o.Plugins[i]) { // not required
			continue
		}

		if o.Plugins[i] != nil {

			if err := o.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loadPluginOK" + "." + "plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
