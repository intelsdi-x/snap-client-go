package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddTask creates a task based on the input othereise an error returns if the input misses the required fields or is in a malformed format
*/
func (a *Client) AddTask(params *AddTaskParams) (*AddTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTask",
		Method:             "POST",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTaskCreated), nil

}

/*
DeletePluginConfigItem deletes the config of a giving plugin note that that to be removed config items are a slice of config keys

At lease one config key is required for this operation. An error occurs for any bad request.
*/
func (a *Client) DeletePluginConfigItem(params *DeletePluginConfigItemParams) (*DeletePluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePluginConfigItem",
		Method:             "DELETE",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePluginConfigItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePluginConfigItemOK), nil

}

/*
GetMetrics lists a list of loaded metric types an empty list returns if there is no loaded metrics any bad request results in error
*/
func (a *Client) GetMetrics(params *GetMetricsParams) (*GetMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetrics",
		Method:             "GET",
		PathPattern:        "/metrics",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetricsOK), nil

}

/*
GetPlugin lists a given plugin by its type name and version no plugin found error returns if it s not existing
*/
func (a *Client) GetPlugin(params *GetPluginParams) (*GetPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginOK), nil

}

/*
GetPluginConfigItem lists the config of a giving plugin the allowed plugin types are collector processor and publisher

Any other type results in error.
*/
func (a *Client) GetPluginConfigItem(params *GetPluginConfigItemParams) (*GetPluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginConfigItem",
		Method:             "GET",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginConfigItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginConfigItemOK), nil

}

/*
GetPlugins lists a list of loaded plugins an empty list is returned if there is no loaded plugins
*/
func (a *Client) GetPlugins(params *GetPluginsParams) (*GetPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugins",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginsOK), nil

}

/*
GetTask lists a task by the giving task id otherwise a not found error returns
*/
func (a *Client) GetTask(params *GetTaskParams) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskOK), nil

}

/*
GetTasks lists a list of created tasks an empty list returns if no created tasks
*/
func (a *Client) GetTasks(params *GetTasksParams) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasksOK), nil

}

/*
LoadPlugin loads a plugin based on input
*/
func (a *Client) LoadPlugin(params *LoadPluginParams) (*LoadPluginOK, *LoadPluginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadPlugin",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf", "multipart/form-data"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LoadPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LoadPluginOK:
		return value, nil, nil
	case *LoadPluginCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveTask deletes a task for the giving task id note that only a stopped task may be removed otherwise an error occurs
*/
func (a *Client) RemoveTask(params *RemoveTaskParams) (*RemoveTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTask",
		Method:             "DELETE",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveTaskNoContent), nil

}

/*
SetPluginConfigItem updates the config of a giving plugin a wrong plugin type or non numeric plugin version results in error
*/
func (a *Client) SetPluginConfigItem(params *SetPluginConfigItemParams) (*SetPluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPluginConfigItem",
		Method:             "PUT",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetPluginConfigItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPluginConfigItemOK), nil

}

/*
UnloadPlugin unloads a plugin by its type name and version otherwise an error is returned
*/
func (a *Client) UnloadPlugin(params *UnloadPluginParams) (*UnloadPluginOK, *UnloadPluginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnloadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unloadPlugin",
		Method:             "DELETE",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnloadPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UnloadPluginOK:
		return value, nil, nil
	case *UnloadPluginNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateTaskState updates a task s state for the giving task id and the input state an error occurs for any bad request
*/
func (a *Client) UpdateTaskState(params *UpdateTaskStateParams) (*UpdateTaskStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTaskState",
		Method:             "PUT",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTaskStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTaskStateNoContent), nil

}

/*
WatchTask watches a task data stream for the giving task id otherwise an error returns
*/
func (a *Client) WatchTask(params *WatchTaskParams) (*WatchTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchTask",
		Method:             "GET",
		PathPattern:        "/tasks/{id}/watch",
		ProducesMediaTypes: []string{"application/json", "application/x-protobuf", "text/event-stream"},
		ConsumesMediaTypes: []string{"application/json", "application/x-protobuf", "text/event-stream"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WatchTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WatchTaskOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
