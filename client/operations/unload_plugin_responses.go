package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// UnloadPluginReader is a Reader for the UnloadPlugin structure.
type UnloadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnloadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUnloadPluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUnloadPluginNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUnloadPluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUnloadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUnloadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnloadPluginOK creates a UnloadPluginOK with default headers values
func NewUnloadPluginOK() *UnloadPluginOK {
	return &UnloadPluginOK{}
}

/*UnloadPluginOK handles this case with default header values.

PluginsResp represents the response from plugin operations.
*/
type UnloadPluginOK struct {
	Payload UnloadPluginOKBody
}

func (o *UnloadPluginOK) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginOK  %+v", 200, o.Payload)
}

func (o *UnloadPluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginNoContent creates a UnloadPluginNoContent with default headers values
func NewUnloadPluginNoContent() *UnloadPluginNoContent {
	return &UnloadPluginNoContent{}
}

/*UnloadPluginNoContent handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type UnloadPluginNoContent struct {
	Payload *models.Plugin
}

func (o *UnloadPluginNoContent) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginNoContent  %+v", 204, o.Payload)
}

func (o *UnloadPluginNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginNotFound creates a UnloadPluginNotFound with default headers values
func NewUnloadPluginNotFound() *UnloadPluginNotFound {
	return &UnloadPluginNotFound{}
}

/*UnloadPluginNotFound handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type UnloadPluginNotFound struct {
	Payload UnloadPluginNotFoundBody
}

func (o *UnloadPluginNotFound) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginNotFound  %+v", 404, o.Payload)
}

func (o *UnloadPluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginConflict creates a UnloadPluginConflict with default headers values
func NewUnloadPluginConflict() *UnloadPluginConflict {
	return &UnloadPluginConflict{}
}

/*UnloadPluginConflict handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type UnloadPluginConflict struct {
	Payload UnloadPluginConflictBody
}

func (o *UnloadPluginConflict) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginConflict  %+v", 409, o.Payload)
}

func (o *UnloadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginInternalServerError creates a UnloadPluginInternalServerError with default headers values
func NewUnloadPluginInternalServerError() *UnloadPluginInternalServerError {
	return &UnloadPluginInternalServerError{}
}

/*UnloadPluginInternalServerError handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type UnloadPluginInternalServerError struct {
	Payload UnloadPluginInternalServerErrorBody
}

func (o *UnloadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *UnloadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UnloadPluginConflictBody unload plugin conflict body
swagger:model UnloadPluginConflictBody
*/
type UnloadPluginConflictBody map[string]string

// Validate validates this unload plugin conflict body
func (o UnloadPluginConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*UnloadPluginInternalServerErrorBody unload plugin internal server error body
swagger:model UnloadPluginInternalServerErrorBody
*/
type UnloadPluginInternalServerErrorBody map[string]string

// Validate validates this unload plugin internal server error body
func (o UnloadPluginInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*UnloadPluginNotFoundBody unload plugin not found body
swagger:model UnloadPluginNotFoundBody
*/
type UnloadPluginNotFoundBody map[string]string

// Validate validates this unload plugin not found body
func (o UnloadPluginNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(o) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*UnloadPluginOKBody unload plugin o k body
swagger:model UnloadPluginOKBody
*/
type UnloadPluginOKBody struct {

	// plugins
	// Required: true
	Plugins []*models.Plugin `json:"Plugins"`
}

// Validate validates this unload plugin o k body
func (o *UnloadPluginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePlugins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UnloadPluginOKBody) validatePlugins(formats strfmt.Registry) error {

	if err := validate.Required("unloadPluginOK"+"."+"plugins", "body", o.Plugins); err != nil {
		return err
	}

	for i := 0; i < len(o.Plugins); i++ {

		if swag.IsZero(o.Plugins[i]) { // not required
			continue
		}

		if o.Plugins[i] != nil {

			if err := o.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unloadPluginOK" + "." + "plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
