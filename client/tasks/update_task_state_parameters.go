// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateTaskStateParams creates a new UpdateTaskStateParams object
// with the default values initialized.
func NewUpdateTaskStateParams() *UpdateTaskStateParams {
	var ()
	return &UpdateTaskStateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTaskStateParamsWithTimeout creates a new UpdateTaskStateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateTaskStateParamsWithTimeout(timeout time.Duration) *UpdateTaskStateParams {
	var ()
	return &UpdateTaskStateParams{

		timeout: timeout,
	}
}

// NewUpdateTaskStateParamsWithContext creates a new UpdateTaskStateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateTaskStateParamsWithContext(ctx context.Context) *UpdateTaskStateParams {
	var ()
	return &UpdateTaskStateParams{

		Context: ctx,
	}
}

// NewUpdateTaskStateParamsWithHTTPClient creates a new UpdateTaskStateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateTaskStateParamsWithHTTPClient(client *http.Client) *UpdateTaskStateParams {
	var ()
	return &UpdateTaskStateParams{
		HTTPClient: client,
	}
}

/*UpdateTaskStateParams contains all the parameters to send to the API endpoint
for the update task state operation typically these are written to a http.Request
*/
type UpdateTaskStateParams struct {

	/*Action
	  Update the state of a task

	*/
	Action string
	/*ID*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update task state params
func (o *UpdateTaskStateParams) WithTimeout(timeout time.Duration) *UpdateTaskStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update task state params
func (o *UpdateTaskStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update task state params
func (o *UpdateTaskStateParams) WithContext(ctx context.Context) *UpdateTaskStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update task state params
func (o *UpdateTaskStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update task state params
func (o *UpdateTaskStateParams) WithHTTPClient(client *http.Client) *UpdateTaskStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update task state params
func (o *UpdateTaskStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the update task state params
func (o *UpdateTaskStateParams) WithAction(action string) *UpdateTaskStateParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the update task state params
func (o *UpdateTaskStateParams) SetAction(action string) {
	o.Action = action
}

// WithID adds the id to the update task state params
func (o *UpdateTaskStateParams) WithID(id string) *UpdateTaskStateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update task state params
func (o *UpdateTaskStateParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTaskStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param action
	qrAction := o.Action
	qAction := qrAction
	if qAction != "" {
		if err := r.SetQueryParam("action", qAction); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
