package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// UpdateTaskStateReader is a Reader for the UpdateTaskState structure.
type UpdateTaskStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTaskStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewUpdateTaskStateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateTaskStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateTaskStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateTaskStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTaskStateNoContent creates a UpdateTaskStateNoContent with default headers values
func NewUpdateTaskStateNoContent() *UpdateTaskStateNoContent {
	return &UpdateTaskStateNoContent{}
}

/*UpdateTaskStateNoContent handles this case with default header values.

TaskResp returns the giving task.
*/
type UpdateTaskStateNoContent struct {
	Payload *models.Task
}

func (o *UpdateTaskStateNoContent) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}][%d] updateTaskStateNoContent  %+v", 204, o.Payload)
}

func (o *UpdateTaskStateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskStateBadRequest creates a UpdateTaskStateBadRequest with default headers values
func NewUpdateTaskStateBadRequest() *UpdateTaskStateBadRequest {
	return &UpdateTaskStateBadRequest{}
}

/*UpdateTaskStateBadRequest handles this case with default header values.

Error
*/
type UpdateTaskStateBadRequest struct {
	Payload *models.Error
}

func (o *UpdateTaskStateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}][%d] updateTaskStateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTaskStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskStateConflict creates a UpdateTaskStateConflict with default headers values
func NewUpdateTaskStateConflict() *UpdateTaskStateConflict {
	return &UpdateTaskStateConflict{}
}

/*UpdateTaskStateConflict handles this case with default header values.

Error
*/
type UpdateTaskStateConflict struct {
	Payload *models.Error
}

func (o *UpdateTaskStateConflict) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}][%d] updateTaskStateConflict  %+v", 409, o.Payload)
}

func (o *UpdateTaskStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskStateInternalServerError creates a UpdateTaskStateInternalServerError with default headers values
func NewUpdateTaskStateInternalServerError() *UpdateTaskStateInternalServerError {
	return &UpdateTaskStateInternalServerError{}
}

/*UpdateTaskStateInternalServerError handles this case with default header values.

Error
*/
type UpdateTaskStateInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateTaskStateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}][%d] updateTaskStateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTaskStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
