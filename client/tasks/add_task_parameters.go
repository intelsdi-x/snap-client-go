// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// NewAddTaskParams creates a new AddTaskParams object
// with the default values initialized.
func NewAddTaskParams() *AddTaskParams {
	var ()
	return &AddTaskParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddTaskParamsWithTimeout creates a new AddTaskParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddTaskParamsWithTimeout(timeout time.Duration) *AddTaskParams {
	var ()
	return &AddTaskParams{

		timeout: timeout,
	}
}

// NewAddTaskParamsWithContext creates a new AddTaskParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddTaskParamsWithContext(ctx context.Context) *AddTaskParams {
	var ()
	return &AddTaskParams{

		Context: ctx,
	}
}

// NewAddTaskParamsWithHTTPClient creates a new AddTaskParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddTaskParamsWithHTTPClient(client *http.Client) *AddTaskParams {
	var ()
	return &AddTaskParams{
		HTTPClient: client,
	}
}

/*AddTaskParams contains all the parameters to send to the API endpoint
for the add task operation typically these are written to a http.Request
*/
type AddTaskParams struct {

	/*Task
	  Create a task.

	*/
	Task *models.Task

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add task params
func (o *AddTaskParams) WithTimeout(timeout time.Duration) *AddTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add task params
func (o *AddTaskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add task params
func (o *AddTaskParams) WithContext(ctx context.Context) *AddTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add task params
func (o *AddTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add task params
func (o *AddTaskParams) WithHTTPClient(client *http.Client) *AddTaskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add task params
func (o *AddTaskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTask adds the task to the add task params
func (o *AddTaskParams) WithTask(task *models.Task) *AddTaskParams {
	o.SetTask(task)
	return o
}

// SetTask adds the task to the add task params
func (o *AddTaskParams) SetTask(task *models.Task) {
	o.Task = task
}

// WriteToRequest writes these params to a swagger request
func (o *AddTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Task == nil {
		o.Task = new(models.Task)
	}

	if err := r.SetBodyParam(o.Task); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
