// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// WatchTaskReader is a Reader for the WatchTask structure.
type WatchTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WatchTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewWatchTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewWatchTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewWatchTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewWatchTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewWatchTaskOK creates a WatchTaskOK with default headers values
func NewWatchTaskOK() *WatchTaskOK {
	return &WatchTaskOK{}
}

/*WatchTaskOK handles this case with default header values.

TaskWatchResponse defines the response of the task watching stream.
*/
type WatchTaskOK struct {
	Payload WatchTaskOKBody
}

func (o *WatchTaskOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/watch][%d] watchTaskOK  %+v", 200, o.Payload)
}

func (o *WatchTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchTaskUnauthorized creates a WatchTaskUnauthorized with default headers values
func NewWatchTaskUnauthorized() *WatchTaskUnauthorized {
	return &WatchTaskUnauthorized{}
}

/*WatchTaskUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type WatchTaskUnauthorized struct {
	Payload *models.UnauthError
}

func (o *WatchTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/watch][%d] watchTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *WatchTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchTaskNotFound creates a WatchTaskNotFound with default headers values
func NewWatchTaskNotFound() *WatchTaskNotFound {
	return &WatchTaskNotFound{}
}

/*WatchTaskNotFound handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type WatchTaskNotFound struct {
	Payload *models.Error
}

func (o *WatchTaskNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/watch][%d] watchTaskNotFound  %+v", 404, o.Payload)
}

func (o *WatchTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchTaskInternalServerError creates a WatchTaskInternalServerError with default headers values
func NewWatchTaskInternalServerError() *WatchTaskInternalServerError {
	return &WatchTaskInternalServerError{}
}

/*WatchTaskInternalServerError handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type WatchTaskInternalServerError struct {
	Payload *models.Error
}

func (o *WatchTaskInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/watch][%d] watchTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *WatchTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*WatchTaskOKBody watch task o k body
swagger:model WatchTaskOKBody
*/
type WatchTaskOKBody struct {

	// task watch
	// Required: true
	TaskWatch *models.StreamedTaskEvent `json:"task_watch"`
}

// Validate validates this watch task o k body
func (o *WatchTaskOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTaskWatch(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WatchTaskOKBody) validateTaskWatch(formats strfmt.Registry) error {

	if err := validate.Required("watchTaskOK"+"."+"task_watch", "body", o.TaskWatch); err != nil {
		return err
	}

	if o.TaskWatch != nil {

		if err := o.TaskWatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("watchTaskOK" + "." + "task_watch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *WatchTaskOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WatchTaskOKBody) UnmarshalBinary(b []byte) error {
	var res WatchTaskOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
