// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// GetPluginReader is a Reader for the GetPlugin structure.
type GetPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPluginOK creates a GetPluginOK with default headers values
func NewGetPluginOK() *GetPluginOK {
	return &GetPluginOK{}
}

/*GetPluginOK handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type GetPluginOK struct {
	Payload *models.Plugin
}

func (o *GetPluginOK) Error() string {
	return fmt.Sprintf("[GET /plugins/{ptype}/{pname}/{pversion}][%d] getPluginOK  %+v", 200, o.Payload)
}

func (o *GetPluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginBadRequest creates a GetPluginBadRequest with default headers values
func NewGetPluginBadRequest() *GetPluginBadRequest {
	return &GetPluginBadRequest{}
}

/*GetPluginBadRequest handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type GetPluginBadRequest struct {
	Payload *models.Error
}

func (o *GetPluginBadRequest) Error() string {
	return fmt.Sprintf("[GET /plugins/{ptype}/{pname}/{pversion}][%d] getPluginBadRequest  %+v", 400, o.Payload)
}

func (o *GetPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginUnauthorized creates a GetPluginUnauthorized with default headers values
func NewGetPluginUnauthorized() *GetPluginUnauthorized {
	return &GetPluginUnauthorized{}
}

/*GetPluginUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type GetPluginUnauthorized struct {
	Payload *models.UnauthError
}

func (o *GetPluginUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins/{ptype}/{pname}/{pversion}][%d] getPluginUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginNotFound creates a GetPluginNotFound with default headers values
func NewGetPluginNotFound() *GetPluginNotFound {
	return &GetPluginNotFound{}
}

/*GetPluginNotFound handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type GetPluginNotFound struct {
	Payload *models.Error
}

func (o *GetPluginNotFound) Error() string {
	return fmt.Sprintf("[GET /plugins/{ptype}/{pname}/{pversion}][%d] getPluginNotFound  %+v", 404, o.Payload)
}

func (o *GetPluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginInternalServerError creates a GetPluginInternalServerError with default headers values
func NewGetPluginInternalServerError() *GetPluginInternalServerError {
	return &GetPluginInternalServerError{}
}

/*GetPluginInternalServerError handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type GetPluginInternalServerError struct {
	Payload *models.Error
}

func (o *GetPluginInternalServerError) Error() string {
	return fmt.Sprintf("[GET /plugins/{ptype}/{pname}/{pversion}][%d] getPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
