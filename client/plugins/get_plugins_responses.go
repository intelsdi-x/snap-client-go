// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// GetPluginsReader is a Reader for the GetPlugins structure.
type GetPluginsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPluginsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPluginsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetPluginsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPluginsOK creates a GetPluginsOK with default headers values
func NewGetPluginsOK() *GetPluginsOK {
	return &GetPluginsOK{}
}

/*GetPluginsOK handles this case with default header values.

PluginsResp represents the response from plugins operations.
*/
type GetPluginsOK struct {
	Payload GetPluginsOKBody
}

func (o *GetPluginsOK) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getPluginsOK  %+v", 200, o.Payload)
}

func (o *GetPluginsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginsUnauthorized creates a GetPluginsUnauthorized with default headers values
func NewGetPluginsUnauthorized() *GetPluginsUnauthorized {
	return &GetPluginsUnauthorized{}
}

/*GetPluginsUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type GetPluginsUnauthorized struct {
	Payload *models.UnauthError
}

func (o *GetPluginsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getPluginsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPluginsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPluginsOKBody get plugins o k body
swagger:model GetPluginsOKBody
*/
type GetPluginsOKBody struct {

	// plugins
	// Required: true
	Plugins []*models.Plugin `json:"plugins"`
}

// Validate validates this get plugins o k body
func (o *GetPluginsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePlugins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPluginsOKBody) validatePlugins(formats strfmt.Registry) error {

	if err := validate.Required("getPluginsOK"+"."+"plugins", "body", o.Plugins); err != nil {
		return err
	}

	for i := 0; i < len(o.Plugins); i++ {

		if swag.IsZero(o.Plugins[i]) { // not required
			continue
		}

		if o.Plugins[i] != nil {

			if err := o.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPluginsOK" + "." + "plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPluginsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPluginsOKBody) UnmarshalBinary(b []byte) error {
	var res GetPluginsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
