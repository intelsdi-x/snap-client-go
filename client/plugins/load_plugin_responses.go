// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// LoadPluginReader is a Reader for the LoadPlugin structure.
type LoadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewLoadPluginCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLoadPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewLoadPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewLoadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewLoadPluginUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoadPluginCreated creates a LoadPluginCreated with default headers values
func NewLoadPluginCreated() *LoadPluginCreated {
	return &LoadPluginCreated{}
}

/*LoadPluginCreated handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type LoadPluginCreated struct {
	Payload *models.Plugin
}

func (o *LoadPluginCreated) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginCreated  %+v", 201, o.Payload)
}

func (o *LoadPluginCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginBadRequest creates a LoadPluginBadRequest with default headers values
func NewLoadPluginBadRequest() *LoadPluginBadRequest {
	return &LoadPluginBadRequest{}
}

/*LoadPluginBadRequest handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginBadRequest struct {
	Payload *models.Error
}

func (o *LoadPluginBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginBadRequest  %+v", 400, o.Payload)
}

func (o *LoadPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginUnauthorized creates a LoadPluginUnauthorized with default headers values
func NewLoadPluginUnauthorized() *LoadPluginUnauthorized {
	return &LoadPluginUnauthorized{}
}

/*LoadPluginUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type LoadPluginUnauthorized struct {
	Payload *models.UnauthError
}

func (o *LoadPluginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoadPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginConflict creates a LoadPluginConflict with default headers values
func NewLoadPluginConflict() *LoadPluginConflict {
	return &LoadPluginConflict{}
}

/*LoadPluginConflict handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginConflict struct {
	Payload *models.Error
}

func (o *LoadPluginConflict) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginConflict  %+v", 409, o.Payload)
}

func (o *LoadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginUnsupportedMediaType creates a LoadPluginUnsupportedMediaType with default headers values
func NewLoadPluginUnsupportedMediaType() *LoadPluginUnsupportedMediaType {
	return &LoadPluginUnsupportedMediaType{}
}

/*LoadPluginUnsupportedMediaType handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *LoadPluginUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *LoadPluginUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginInternalServerError creates a LoadPluginInternalServerError with default headers values
func NewLoadPluginInternalServerError() *LoadPluginInternalServerError {
	return &LoadPluginInternalServerError{}
}

/*LoadPluginInternalServerError handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginInternalServerError struct {
	Payload *models.Error
}

func (o *LoadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *LoadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
