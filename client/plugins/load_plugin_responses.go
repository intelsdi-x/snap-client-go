/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2017 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// LoadPluginReader is a Reader for the LoadPlugin structure.
type LoadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewLoadPluginCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLoadPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewLoadPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewLoadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewLoadPluginUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewLoadPluginDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoadPluginCreated creates a LoadPluginCreated with default headers values
func NewLoadPluginCreated() *LoadPluginCreated {
	return &LoadPluginCreated{}
}

/*LoadPluginCreated handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type LoadPluginCreated struct {
	Payload *models.Plugin
}

func (o *LoadPluginCreated) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginCreated  %+v", 201, o.Payload)
}

func (o *LoadPluginCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginBadRequest creates a LoadPluginBadRequest with default headers values
func NewLoadPluginBadRequest() *LoadPluginBadRequest {
	return &LoadPluginBadRequest{}
}

/*LoadPluginBadRequest handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginBadRequest struct {
	Payload *models.Error
}

func (o *LoadPluginBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginBadRequest  %+v", 400, o.Payload)
}

func (o *LoadPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginUnauthorized creates a LoadPluginUnauthorized with default headers values
func NewLoadPluginUnauthorized() *LoadPluginUnauthorized {
	return &LoadPluginUnauthorized{}
}

/*LoadPluginUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type LoadPluginUnauthorized struct {
	Payload *models.UnauthError
}

func (o *LoadPluginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoadPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginConflict creates a LoadPluginConflict with default headers values
func NewLoadPluginConflict() *LoadPluginConflict {
	return &LoadPluginConflict{}
}

/*LoadPluginConflict handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginConflict struct {
	Payload *models.Error
}

func (o *LoadPluginConflict) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginConflict  %+v", 409, o.Payload)
}

func (o *LoadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginUnsupportedMediaType creates a LoadPluginUnsupportedMediaType with default headers values
func NewLoadPluginUnsupportedMediaType() *LoadPluginUnsupportedMediaType {
	return &LoadPluginUnsupportedMediaType{}
}

/*LoadPluginUnsupportedMediaType handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *LoadPluginUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *LoadPluginUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginInternalServerError creates a LoadPluginInternalServerError with default headers values
func NewLoadPluginInternalServerError() *LoadPluginInternalServerError {
	return &LoadPluginInternalServerError{}
}

/*LoadPluginInternalServerError handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type LoadPluginInternalServerError struct {
	Payload *models.Error
}

func (o *LoadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *LoadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadPluginDefault creates a LoadPluginDefault with default headers values
func NewLoadPluginDefault(code int) *LoadPluginDefault {
	return &LoadPluginDefault{
		_statusCode: code,
	}
}

/*LoadPluginDefault handles this case with default header values.

ErrorStringResponse represents an error in the string format.

It includes an error message only.
*/
type LoadPluginDefault struct {
	_statusCode int

	Message string
}

// Code gets the status code for the load plugin default response
func (o *LoadPluginDefault) Code() int {
	return o._statusCode
}

func (o *LoadPluginDefault) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] loadPlugin default ", o._statusCode)
}

func (o *LoadPluginDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	return nil
}
