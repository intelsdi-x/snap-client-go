// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePluginConfigItem deletes config

A minimum of one config key is required for this operation.
*/
func (a *Client) DeletePluginConfigItem(params *DeletePluginConfigItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePluginConfigItem",
		Method:             "DELETE",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePluginConfigItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePluginConfigItemOK), nil

}

/*
GetMetrics gets metrics

An empty list returns if there is no loaded metrics.
*/
func (a *Client) GetMetrics(params *GetMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetrics",
		Method:             "GET",
		PathPattern:        "/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetricsOK), nil

}

/*
GetPlugin gets

An error will be returned if the plugin does not exist.
*/
func (a *Client) GetPlugin(params *GetPluginParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginOK), nil

}

/*
GetPluginConfigItem gets config

An empty config is returned if there are no configs for the plugin.
*/
func (a *Client) GetPluginConfigItem(params *GetPluginConfigItemParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginConfigItem",
		Method:             "GET",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginConfigItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginConfigItemOK), nil

}

/*
GetPlugins gets all

An empty list is returned if there are no loaded plugins.
*/
func (a *Client) GetPlugins(params *GetPluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugins",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginsOK), nil

}

/*
LoadPlugin loads

A plugin binary is required.
*/
func (a *Client) LoadPlugin(params *LoadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*LoadPluginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadPlugin",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LoadPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadPluginCreated), nil

}

/*
SetPluginConfigItem sets config

A config is JSON. For example: {"user":"snap", "host":"ocean_eleven"}.
*/
func (a *Client) SetPluginConfigItem(params *SetPluginConfigItemParams, authInfo runtime.ClientAuthInfoWriter) (*SetPluginConfigItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPluginConfigItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPluginConfigItem",
		Method:             "PUT",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetPluginConfigItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPluginConfigItemOK), nil

}

/*
UnloadPlugin unloads

Required fields are plugin type, name and version.
*/
func (a *Client) UnloadPlugin(params *UnloadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*UnloadPluginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnloadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unloadPlugin",
		Method:             "DELETE",
		PathPattern:        "/plugins/{ptype}/{pname}/{pversion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnloadPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnloadPluginNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
