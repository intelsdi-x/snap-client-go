// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMetricsParams creates a new GetMetricsParams object
// with the default values initialized.
func NewGetMetricsParams() *GetMetricsParams {
	var ()
	return &GetMetricsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMetricsParamsWithTimeout creates a new GetMetricsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMetricsParamsWithTimeout(timeout time.Duration) *GetMetricsParams {
	var ()
	return &GetMetricsParams{

		timeout: timeout,
	}
}

// NewGetMetricsParamsWithContext creates a new GetMetricsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMetricsParamsWithContext(ctx context.Context) *GetMetricsParams {
	var ()
	return &GetMetricsParams{

		Context: ctx,
	}
}

// NewGetMetricsParamsWithHTTPClient creates a new GetMetricsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMetricsParamsWithHTTPClient(client *http.Client) *GetMetricsParams {
	var ()
	return &GetMetricsParams{
		HTTPClient: client,
	}
}

/*GetMetricsParams contains all the parameters to send to the API endpoint
for the get metrics operation typically these are written to a http.Request
*/
type GetMetricsParams struct {

	/*Ns*/
	Ns *string
	/*Ver*/
	Ver *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get metrics params
func (o *GetMetricsParams) WithTimeout(timeout time.Duration) *GetMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get metrics params
func (o *GetMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get metrics params
func (o *GetMetricsParams) WithContext(ctx context.Context) *GetMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get metrics params
func (o *GetMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get metrics params
func (o *GetMetricsParams) WithHTTPClient(client *http.Client) *GetMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get metrics params
func (o *GetMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNs adds the ns to the get metrics params
func (o *GetMetricsParams) WithNs(ns *string) *GetMetricsParams {
	o.SetNs(ns)
	return o
}

// SetNs adds the ns to the get metrics params
func (o *GetMetricsParams) SetNs(ns *string) {
	o.Ns = ns
}

// WithVer adds the ver to the get metrics params
func (o *GetMetricsParams) WithVer(ver *int64) *GetMetricsParams {
	o.SetVer(ver)
	return o
}

// SetVer adds the ver to the get metrics params
func (o *GetMetricsParams) SetVer(ver *int64) {
	o.Ver = ver
}

// WriteToRequest writes these params to a swagger request
func (o *GetMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ns != nil {

		// query param ns
		var qrNs string
		if o.Ns != nil {
			qrNs = *o.Ns
		}
		qNs := qrNs
		if qNs != "" {
			if err := r.SetQueryParam("ns", qNs); err != nil {
				return err
			}
		}

	}

	if o.Ver != nil {

		// query param ver
		var qrVer int64
		if o.Ver != nil {
			qrVer = *o.Ver
		}
		qVer := swag.FormatInt64(qrVer)
		if qVer != "" {
			if err := r.SetQueryParam("ver", qVer); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
