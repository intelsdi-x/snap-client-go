package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPluginsParams creates a new GetPluginsParams object
// with the default values initialized.
func NewGetPluginsParams() *GetPluginsParams {
	var ()
	return &GetPluginsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPluginsParamsWithTimeout creates a new GetPluginsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPluginsParamsWithTimeout(timeout time.Duration) *GetPluginsParams {
	var ()
	return &GetPluginsParams{

		timeout: timeout,
	}
}

// NewGetPluginsParamsWithContext creates a new GetPluginsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPluginsParamsWithContext(ctx context.Context) *GetPluginsParams {
	var ()
	return &GetPluginsParams{

		Context: ctx,
	}
}

// NewGetPluginsParamsWithHTTPClient creates a new GetPluginsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPluginsParamsWithHTTPClient(client *http.Client) *GetPluginsParams {
	var ()
	return &GetPluginsParams{
		HTTPClient: client,
	}
}

/*GetPluginsParams contains all the parameters to send to the API endpoint
for the get plugins operation typically these are written to a http.Request
*/
type GetPluginsParams struct {

	/*Name*/
	Name *string
	/*Running*/
	Running *bool
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get plugins params
func (o *GetPluginsParams) WithTimeout(timeout time.Duration) *GetPluginsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get plugins params
func (o *GetPluginsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get plugins params
func (o *GetPluginsParams) WithContext(ctx context.Context) *GetPluginsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get plugins params
func (o *GetPluginsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get plugins params
func (o *GetPluginsParams) WithHTTPClient(client *http.Client) *GetPluginsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get plugins params
func (o *GetPluginsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get plugins params
func (o *GetPluginsParams) WithName(name *string) *GetPluginsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get plugins params
func (o *GetPluginsParams) SetName(name *string) {
	o.Name = name
}

// WithRunning adds the running to the get plugins params
func (o *GetPluginsParams) WithRunning(running *bool) *GetPluginsParams {
	o.SetRunning(running)
	return o
}

// SetRunning adds the running to the get plugins params
func (o *GetPluginsParams) SetRunning(running *bool) {
	o.Running = running
}

// WithType adds the typeVar to the get plugins params
func (o *GetPluginsParams) WithType(typeVar *string) *GetPluginsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get plugins params
func (o *GetPluginsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetPluginsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Running != nil {

		// query param running
		var qrRunning bool
		if o.Running != nil {
			qrRunning = *o.Running
		}
		qRunning := swag.FormatBool(qrRunning)
		if qRunning != "" {
			if err := r.SetQueryParam("running", qRunning); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
