// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// UnloadPluginReader is a Reader for the UnloadPlugin structure.
type UnloadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnloadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewUnloadPluginNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUnloadPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUnloadPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUnloadPluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUnloadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUnloadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnloadPluginNoContent creates a UnloadPluginNoContent with default headers values
func NewUnloadPluginNoContent() *UnloadPluginNoContent {
	return &UnloadPluginNoContent{}
}

/*UnloadPluginNoContent handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type UnloadPluginNoContent struct {
	Payload *models.Plugin
}

func (o *UnloadPluginNoContent) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginNoContent  %+v", 204, o.Payload)
}

func (o *UnloadPluginNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginBadRequest creates a UnloadPluginBadRequest with default headers values
func NewUnloadPluginBadRequest() *UnloadPluginBadRequest {
	return &UnloadPluginBadRequest{}
}

/*UnloadPluginBadRequest handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type UnloadPluginBadRequest struct {
	Payload *models.Error
}

func (o *UnloadPluginBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginBadRequest  %+v", 400, o.Payload)
}

func (o *UnloadPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginUnauthorized creates a UnloadPluginUnauthorized with default headers values
func NewUnloadPluginUnauthorized() *UnloadPluginUnauthorized {
	return &UnloadPluginUnauthorized{}
}

/*UnloadPluginUnauthorized handles this case with default header values.

UnauthResponse returns Unauthorized error struct message.
*/
type UnloadPluginUnauthorized struct {
	Payload *models.UnauthError
}

func (o *UnloadPluginUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginUnauthorized  %+v", 401, o.Payload)
}

func (o *UnloadPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginNotFound creates a UnloadPluginNotFound with default headers values
func NewUnloadPluginNotFound() *UnloadPluginNotFound {
	return &UnloadPluginNotFound{}
}

/*UnloadPluginNotFound handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type UnloadPluginNotFound struct {
	Payload *models.Error
}

func (o *UnloadPluginNotFound) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginNotFound  %+v", 404, o.Payload)
}

func (o *UnloadPluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginConflict creates a UnloadPluginConflict with default headers values
func NewUnloadPluginConflict() *UnloadPluginConflict {
	return &UnloadPluginConflict{}
}

/*UnloadPluginConflict handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type UnloadPluginConflict struct {
	Payload *models.Error
}

func (o *UnloadPluginConflict) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginConflict  %+v", 409, o.Payload)
}

func (o *UnloadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnloadPluginInternalServerError creates a UnloadPluginInternalServerError with default headers values
func NewUnloadPluginInternalServerError() *UnloadPluginInternalServerError {
	return &UnloadPluginInternalServerError{}
}

/*UnloadPluginInternalServerError handles this case with default header values.

ErrorResponse represents the Snap error response type.

It includes an error message and a map of fields.
*/
type UnloadPluginInternalServerError struct {
	Payload *models.Error
}

func (o *UnloadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{ptype}/{pname}/{pversion}][%d] unloadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *UnloadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
